<UserControl x:Class="ManiacEditor.Controls.Editor.Toolbar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ManiacEditor.Controls.Editor"
             xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             xmlns:maniac="clr-namespace:ManiacEditor.Controls.Global"
             xmlns:globControls="clr-namespace:ManiacEditor.Controls.Global.Controls"
             xmlns:state="clr-namespace:ManiacEditor.Methods.Solution"
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="1200">
    <Grid Background="{DynamicResource ToolbarBackground}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"></ColumnDefinition>
            <ColumnDefinition Width="140"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="82"></RowDefinition>
        </Grid.RowDefinitions>
        <ToolBarTray HorizontalAlignment="Stretch" VerticalAlignment="Top" Grid.Row="1" Background="{DynamicResource ToolbarBackground}" IsLocked="True" x:Name="ToolbarTray">
            <ToolBar Band="0" BandIndex="1" HorizontalAlignment="Stretch" Height="42" x:Name="MainToolbarButtons" Background="{DynamicResource ToolbarBackground}" Foreground="{DynamicResource NormalText}" KeyboardNavigation.TabNavigation="Continue">
                <Button Style="{DynamicResource ToolbarButton}" x:Name="New" Click="NewSceneEvent" IsEnabled="False" Content="{DynamicResource AddFile}"></Button>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="Open" Click="OpenSceneEvent" Content="{DynamicResource OpenScene}"></Button>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="Save" Click="SaveSceneEvent" Content="{DynamicResource SaveFloppy}" IsEnabled="{state:SolutionStateBinding SceneLoaded}"></Button>
                <Separator/>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="ZoomInButton" Click="ZoomInEvent" Content="{DynamicResource ZoomIn}" IsEnabled="{state:SolutionStateBinding CanZoomIn}"></Button>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="ZoomOutButton" Click="ZoomOutEvent" Content="{DynamicResource ZoomOut}" IsEnabled="{state:SolutionStateBinding CanZoomOut}"></Button>
                <Separator/>
                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource RunScene}" x:Name="RunSceneButton" Click="RunSceneEvent" VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0"></Button>
                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon6}" Click="ContextMenuButton_Click"  x:Name="RunSceneDropDown" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem x:Name="launchToolStripMenuItem" Header="Launch/Attach/Focus" Click="RunSceneEvent"/>
                            <Separator/>
                            <MenuItem x:Name="trackThePlayerToolStripMenuItem" Header="Track the Player...">
                                <MenuItem x:Name="trackP1ToolStripMenuItem" Header="Track P1" Tag="1" Click="TrackThePlayer"/>
                                <MenuItem x:Name="trackP2ToolStripMenuItem" Header="Track P2" Tag="2" Click="TrackThePlayer"/>
                                <MenuItem x:Name="trackP3ToolStripMenuItem" Header="Track P3" Tag="3" Click="TrackThePlayer"/>
                                <MenuItem x:Name="trackP4ToolStripMenuItem" Header="Track P4" Tag="4" Click="TrackThePlayer"/>
                            </MenuItem>
                            <MenuItem x:Name="restartSceneToolStripMenuItem1" Header="Restart Scene" Click="RestartScene"/>
                            <MenuItem x:Name="assetResetToolStripMenuItem1" Header="Asset Reset" Click="AssetReset"/>
                            <Separator/>
                            <MenuItem x:Name="openModManagerToolStripMenuItem" Header="Open Mod Manager" Click="ModManager"/>
                            <MenuItem x:Name="selectConfigToolStripMenuItem" Header="Select Config...">
                                <MenuItem x:Name="noConfigFilesToolStripMenuItem" Header="No Config Files" IsEnabled="False"/>
                            </MenuItem>
                            <MenuItem x:Name="editConfigsToolStripMenuItem1" Header="Edit Configs" Click="EditConfigsToolStripMenuItem_Click"/>
                            <Separator/>
                            <MenuItem x:Name="gameOptionsMenuItem" Header="Game Options..." Click="InGameOptionsMenuEvent"/>
                        </ContextMenu>

                    </Button.ContextMenu>
                </Button>
                <Separator/>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="UndoButton"  Click="UndoEvent" Tag="Undo {0} (Ctrl + Z)" Content="{DynamicResource UndoIcon}" IsEnabled="{state:SolutionStateBinding CanUndo}"></Button>
                <Button Style="{DynamicResource ToolbarButton}" x:Name="RedoButton"  Click="RedoEvent" Tag="Redo {0} (Ctrl + Y)" Content="{DynamicResource RedoIcon}" IsEnabled="{state:SolutionStateBinding CanRedo}"></Button>
                <Separator/>
                <Button x:Name="ReloadButton" Style="{DynamicResource ToolbarButton}"  Click="ReloadToolStripButton_Click" Content="{DynamicResource Refresh}" IsEnabled="{state:SolutionStateBinding SceneLoaded}"></Button>
                <Separator/>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="PointerToolButton" Content="{DynamicResource Pointer}"  Click="TogglePointerToolEvent" ></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}"  x:Name="SelectToolButton"   Click="ToggleSelectToolEvent" Content="{DynamicResource Select}" Foreground="Red" ></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}"  x:Name="DrawToolButton"  Click="ToggleDrawToolEvent" Content="{DynamicResource Draw}" ></ToggleButton>
                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon1}" Click="ContextMenuButton_Click"  Name="DrawToolDropdown" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <Label Content="Brush Size (Tiles Edit Only)" x:Name="DrawTileSizeLabel"></Label>
                            <Slider Width="128" Value="1" Minimum="1" SmallChange="1" LargeChange="25"  Maximum="16" TickPlacement="Both" IsSnapToTickEnabled="True" x:Name="DrawTileSizeSlider" ValueChanged="DrawToolSizeChanged"></Slider>
                            <wpfTool:IntegerUpDown x:Name="DrawTileSizeNUD" Value="1" Minimum="1" Maximum="16" ValueChanged="DrawToolSizeChanged"></wpfTool:IntegerUpDown>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}"  x:Name="WandToolButton"  Click="ToggleDrawToolEvent" Content="{DynamicResource Interaction}" ></ToggleButton>
                <Button Style="{DynamicResource ToolbarButton}" Click="ToggleWandToolButton_Click" Content="{DynamicResource DropDownIcon}"  Name="WandToolDropdown" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem IsHitTestVisible="False" Header="Selectable Tiles: "></MenuItem>
                            <Separator></Separator>
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Margin="0,10,10,10" Background="{DynamicResource ContextMenuBackground}">
                                        <globControls:ManiacTileList IsHitTestVisible="True" x:Name="WandSelectTileList" Width="256" Height="512"></globControls:ManiacTileList>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <Separator></Separator>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipXCheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Flip X" Foreground="{DynamicResource NormalText}"></CheckBox>                                
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipYCheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Flip Y" Foreground="{DynamicResource NormalText}"></CheckBox>
                                </MenuItem.Header>
                            </MenuItem>
                            <Separator></Separator>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipSolidTopACheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Solid (Top - A)" Foreground="{DynamicResource NormalText}"></CheckBox>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipSolidTopBCheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Solid (Top - B)" Foreground="{DynamicResource NormalText}"></CheckBox>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipSolidLrbACheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Solid (LRB - A)" Foreground="{DynamicResource NormalText}"></CheckBox>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="False" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <CheckBox x:Name="WandFlipSolidLrbBCheckbox" IsThreeState="True" IsChecked="{x:Null}" Content="Solid (LRB - B)" Foreground="{DynamicResource NormalText}"></CheckBox>
                                </MenuItem.Header>
                            </MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="SplineToolButton"  Click="ToggleSplineToolEvent" Content="{DynamicResource Shapes}" ></ToggleButton>
                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon2}" Click="ContextMenuButton_Click"  Name="SplineToolDropdown" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <Label Content="Spline Spawn Group ID:"></Label>
                            <wpfTool:IntegerUpDown x:Name="SplineSpawnID" Value="0" Minimum="0" Maximum="600"></wpfTool:IntegerUpDown>
                            <Label Content="Spline Group ID"></Label>
                            <wpfTool:IntegerUpDown Value="0" Minimum="0" Maximum="600" x:Name="SplineGroupID" ValueChanged="SplineOptionsIDChangedEvent"></wpfTool:IntegerUpDown>
                            <Separator Margin="0,10"></Separator>
                            <Label Content="Group Options:" IsEnabled="False"></Label>
                            <Separator Margin="0,10"></Separator>
                            <Label Content="Frequency of Points" x:Name="SplinePointSeperationLabel"></Label>
                            <Slider Value="128" Width="200" Minimum="4" Maximum="600" x:Name="SplinePointSeperationSlider" VerticalAlignment="Center" ValueChanged="SplinePointFrequenceChangedEvent"></Slider>
                            <wpfTool:IntegerUpDown x:Name="SplinePointSeperationNUD" Value="128" Minimum="4" Maximum="600" ValueChanged="SplinePointFrequenceChangedEvent"></wpfTool:IntegerUpDown>
                            <CheckBox Content="Show Line" Name="SplineShowLineCheckbox" IsChecked="True" Checked="SplineShowLineCheckboxCheckChanged" Unchecked="SplineShowLineCheckboxCheckChanged"></CheckBox>
                            <CheckBox Content="Show Points" Name="SplineShowPointsCheckbox" IsChecked="True" Checked="SplineShowPointsCheckboxCheckChanged" Unchecked="SplineShowPointsCheckboxCheckChanged"></CheckBox>
                            <CheckBox Name="SplineShowObjectsCheckbox" Checked="SplineShowObjectsCheckboxCheckChanged" Unchecked="SplineShowObjectsCheckboxCheckChanged">
                                <CheckBox.Content>
                                    <TextBlock Text="Show Object Preview" TextWrapping="Wrap"></TextBlock>
                                </CheckBox.Content>
                            </CheckBox>
                            <Separator Margin="0,10"></Separator>

                            <Label Content="Spline Shape: "></Label>
                            <RadioButton Content="Square" Name="SplineLineMode" IsEnabled="False" IsChecked="True" Click="SplineLineMode_Click"></RadioButton>
                            <RadioButton Content="Oval" Name="SplineOvalMode" Click="SplineOvalMode_Click" IsChecked="True"></RadioButton>
                            <Separator Margin="0,10"></Separator>
                            <Label>

                                <Label.Content>
                                    <TextBlock Text="Spline Spawn Object" TextWrapping="Wrap" TextAlignment="Center"></TextBlock>
                                </Label.Content>
                            </Label>
                            <Grid VerticalAlignment="Center">
                                <ComboBox x:Name="SelectedSplineRender" SelectionChanged="SplineSpawnRender_SelectionChanged"></ComboBox>
                                <Button Content="None" Width="200" VerticalAlignment="Stretch" x:Name="SplineRenderObjectName" Click="SplineRenderObjectName_Click"></Button>
                            </Grid>
                            <Separator Margin="0,10"></Separator>
                            <MenuItem x:Name="SplineInfoLabel1" IsEnabled="False" Visibility="Visible" Header=""></MenuItem>
                            <MenuItem x:Name="SplineInfoLabel2" IsEnabled="False" Visibility="Visible" Header="Total Number of Spline Objects: {0}"></MenuItem>
                            <MenuItem x:Name="SplineInfoLabel3" IsEnabled="False" Visibility="Visible" Header="Total Number of Rendered Objects: {0}"></MenuItem>
                            <Separator Margin="0,10"></Separator>
                            <MenuItem Header="Render Selected Spline" x:Name="RenderSelectedSpline" Click="RenderSelectedSpline_Click"></MenuItem>
                            <MenuItem Visibility="Collapsed" Header="Render All Splines"></MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="MagnetMode" Click="ToggleMagnetToolEvent" Content="{DynamicResource Magnet}" ></ToggleButton>

                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon3}" IsEnabled="False" Click="ContextMenuButton_Click"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Padding="0" Margin="0" x:Name="MagnetModeSplitButton">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem Foreground="{DynamicResource DisabledText}" x:Name="gridAlignmentSizeToolStripMenuItem" Header="Grid Alignment Size:"></MenuItem>
                            <MenuItem x:Name="Magnet8x8ModeMenuItem" Header="8x8" Click="Magnet8x8Event"></MenuItem>
                            <MenuItem x:Name="Magnet16x16ModeMenuItem" Header="16x16" Click="Magnet16x16Event" IsChecked="true"></MenuItem>
                            <MenuItem x:Name="Magnet32x32ModeMenuItem" Header="32x32" Click="Magnet32x32Event"></MenuItem>
                            <MenuItem x:Name="Magnet64x64ModeMenuItem" Header="64x64" Click="Magnet64x64Event"></MenuItem>
                            <MenuItem x:Name="MagnetCustomModeMenuItem" Click="MagnetCustomEvent" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <Grid Background="Transparent" VerticalAlignment="Stretch">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                                <ColumnDefinition></ColumnDefinition>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Column="0" Name="CustomMagnetSizeLabel" Tag="Custom ({0}x{0})" VerticalAlignment="Center" Text="Custom (16x16)"></TextBlock>
                                            <wpfTool:IntegerUpDown Grid.Column="1" Margin="10,0,0,0" Name="CustomMagnetSizeAdjuster" HorizontalAlignment="Right" Value="16" DefaultValue="16" ValueChanged="CustomMagnetSizeAdjuster_ValueChanged"></wpfTool:IntegerUpDown>
                                        </Grid>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem Foreground="{DynamicResource DisabledText}" x:Name="optionsToolStripMenuItem1" Header="Options: "></MenuItem>
                            <MenuItem IsCheckable="True" IsChecked="True" x:Name="MagnetXAxisLockMenuItem" Header="Enable X Axis" Click="EnableMagnetXAxisLockEvent"></MenuItem>
                            <MenuItem IsCheckable="True" IsChecked="True" x:Name="MagnetYAxisLockMenuItem" Header="Enable Y Axis" Click="EnableMagnetYAxisLockEvent"></MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>

                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="ChunksToolButton"  Click="ToggleChunksToolEvent" Content="{DynamicResource Stamp}"></ToggleButton>
                <Separator/>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="EncorePaletteButton" IsEnabled="{state:SolutionStateBinding IsEncorePaletteLoaded}" Click="EnableEncorePaletteEvent" Content="{DynamicResource PaletteWheel}"></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="ShowTileIDButton" IsEnabled="{state:SolutionStateBinding SceneLoaded}"   Click="ToggleShowTileIDEvent" Content="{DynamicResource Info}"></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="FlipAssistButton" IsEnabled="{state:SolutionStateBinding SceneLoaded}"   Click="ShowFlippedTileHelperEvent" Content="{DynamicResource RotateFlip}"></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="ShowGridToggleButton" IsEnabled="{state:SolutionStateBinding SceneLoaded}" Click="ToggleGridEvent" Content="{StaticResource Grid}"></ToggleButton>

                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon4}" Click="ContextMenuButton_Click"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Padding="0" Margin="0" x:Name="ShowGridButton">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem Foreground="{DynamicResource DisabledText}" x:Name="toolStripMenuItem1" Header="Grid Size:"></MenuItem>
                            <MenuItem x:Name="Grid16x16SizeMenuItem" Header="16x16" Click="SetGrid16x16Event"></MenuItem>
                            <MenuItem x:Name="Grid128x128SizeMenuItem" Header="128x128" Click="SetGrid128x128Event"></MenuItem>
                            <MenuItem x:Name="Grid256x256SizeMenuItem" Header="256x256" Click="SetGrid256x256Event"></MenuItem>
                            <MenuItem x:Name="GridCustomSizeMenuItem" Click="SetGridCustomSizeEvent" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Name="CustomGridSizeLabel" Tag="Custom ({0}x{0})" VerticalAlignment="Center" Text="Custom (16x16)"></TextBlock>
                                        <wpfTool:IntegerUpDown Grid.Column="1" AllowDrop="False" Margin="10,0,0,0" Value="16" Minimum="16" Name="CustomGridSizeAdjuster" HorizontalAlignment="Right" ValueChanged="CustomGridSizeAdjuster_ValueChanged"></wpfTool:IntegerUpDown>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <Separator/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition></ColumnDefinition>
                                    <ColumnDefinition></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Label VerticalAlignment="Center" HorizontalAlignment="Left" Content="Grid Color"></Label>
                                <wpfTool:ColorPicker VerticalAlignment="Center"  ShowTabHeaders="False" Width="60" Grid.Column="1" HorizontalAlignment="Right" SelectedColor="Black" x:Name="GDC" SelectedColorChanged="comboBox8_DropDown"></wpfTool:ColorPicker>
                            </Grid>
                            <Separator/>
                            <TextBlock HorizontalAlignment="Left">Opacity</TextBlock>
                            <Slider x:Name="gridOpacitySlider" Width="128" SmallChange="1" LargeChange="25" Value="255" Maximum="255" HorizontalAlignment="Stretch"></Slider>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Separator/>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="ShowCollisionAButton" IsEnabled="{state:SolutionStateBinding TileConfigLoaded}"  Click="ShowCollisionAEvent"  Content="{DynamicResource PathA}"></ToggleButton>
                <ToggleButton Style="{DynamicResource ToolbarToggleButton}" x:Name="ShowCollisionBButton" IsEnabled="{state:SolutionStateBinding TileConfigLoaded}"  Click="ShowCollisionBEvent"  Content="{StaticResource PathB}"></ToggleButton>
                <Button Style="{DynamicResource ToolbarButton}" Content="{DynamicResource DropDownIcon5}" Name="CollisionSettingsDropdown"  Click="ContextMenuButton_Click" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0" Padding="0" IsEnabled="{state:SolutionStateBinding SceneLoaded}">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ToolbarBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem x:Name="CollisionDefaultMenuItem" Header="Default (Mania)" Click="UseNormalCollisionEvent"/>
                            <MenuItem x:Name="CollisionInvertedMenuItem" Header="Inverted" Click="UseInvertedCollisionEvent"/>
                            <MenuItem x:Name="CollisionCustomMenuItem" Header="Custom" Click="UseCustomCollisionEvent"/>
                            <MenuItem Header="Custom Values..." IsTabStop="False" IsEnabled="False" Focusable="False" Foreground="{DynamicResource DisabledText}"></MenuItem>
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <Label Content="All" Grid.Column="1"></Label>
                                        <wpfTool:ColorPicker IsTabStop="True"  Focusable="True" ShowTabHeaders="False" wpfTool:ColorPicker.Closed="CollisionColorPickerClosed" Width="60" HorizontalAlignment="Right" SelectedColor="White" x:Name="CSAC" SelectedColorChanged="comboBox4_DropDown"></wpfTool:ColorPicker>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <wpfTool:ColorPicker IsTabStop="True"  Focusable="True"  ShowTabHeaders="False" wpfTool:ColorPicker.Closed="CollisionColorPickerClosed" Width="60" HorizontalAlignment="Right" SelectedColor="Yellow" x:Name="SSTOC" SelectedColorChanged="comboBox6_DropDown"></wpfTool:ColorPicker>
                                        <Label Content="Top Only" Grid.Column="1"></Label>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <wpfTool:ColorPicker IsTabStop="True" Focusable="True"   ShowTabHeaders="False" wpfTool:ColorPicker.Closed="CollisionColorPickerClosed" Width="60" HorizontalAlignment="Right" SelectedColor="Red" x:Name="CSLRDC" SelectedColorChanged="comboBox5_DropDown"></wpfTool:ColorPicker>
                                        <Label Content="LRD" Grid.Column="1"></Label>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <Label Foreground="{DynamicResource NormalText}" HorizontalAlignment="Left">Opacity</Label>
                            <Slider x:Name="CollisionOpacitySlider" SmallChange="1" LargeChange="25"  Width="128" Value="255" Maximum="255" HorizontalAlignment="Stretch" ValueChanged="CollisionOpacitySliderValueChangedEvent"></Slider>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Separator/>
                <Button Style="{DynamicResource ToolbarButton}" Click="ContextMenuButton_Click" Foreground="{DynamicResource NormalText}" Name="OtherDropdown" Content="Other Options..." VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" Margin="0" Padding="6" IsEnabled="{state:SolutionStateBinding SceneLoaded}">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ToolbarBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <wpfTool:ColorPicker ShowTabHeaders="False" Width="60" Grid.Column="1" HorizontalAlignment="Right" SelectedColor="Blue" Name="WLC" SelectedColorChanged="comboBox7_DropDown" ></wpfTool:ColorPicker>
                                        <Label Content="Water Color" Grid.ColumnSpan="1"></Label>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition></ColumnDefinition>
                                            <ColumnDefinition></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <wpfTool:ColorPicker ShowTabHeaders="False" Width="60" Grid.Column="1" HorizontalAlignment="Right" SelectedColor="White" Name="EditorBGColor" SelectedColorChanged="EditorBGColor_SelectedColorChanged" ></wpfTool:ColorPicker>
                                        <Label Content="Background Color" Grid.ColumnSpan="1"></Label>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Vertical" Margin="0,1">
                                        <Label Content="Faster Nudge Amount" HorizontalAlignment="Left" VerticalAlignment="Top" Height="26"/>
                                        <wpfTool:IntegerUpDown Name="FasterNudgeValueNUD" HorizontalAlignment="Left" Width="55" ValueChanged="FasterNudgeValueNUD_ValueChanged"/>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Grid HorizontalAlignment="Left">
                </Grid>
                <ToolBar.Resources>
                    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="0,0,0,0"/>
                    </Style>
                </ToolBar.Resources>
            </ToolBar>
            <ToolBar x:Name="LayerToolbar" Band="1" VerticalAlignment="Stretch" BandIndex="0" Background="{DynamicResource ToolbarBackground}" Foreground="{DynamicResource NormalText}" Margin="0,0,-4,0" KeyboardNavigation.TabNavigation="Continue">
                <Grid MinWidth="50" MaxWidth="90" HorizontalAlignment="Left">
                    <Grid x:Name="LayerHint" Grid.Row="1" Margin="0,0,5,0" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"></RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBlock x:Name="LayerLabel" Foreground="{DynamicResource NormalText}" Grid.Row="0" Text="Layers:"/>
                    </Grid>
                </Grid>
                <Separator Margin="0,2"/>
                <ToggleButton x:Name="ShowFGLower" Content="FG Lower" Click="ShowFGLower_Click" Style="{DynamicResource EditLayerToggleButton}"/>
                <ToggleButton x:Name="ShowFGLow" Content="FG Low" Click="ShowFGLow_Click" Style="{DynamicResource EditLayerToggleButton}"/>
                <ToggleButton x:Name="ShowFGHigh" Content="FG High" Click="ShowFGHigh_Click" Style="{DynamicResource EditLayerToggleButton}"/>
                <ToggleButton x:Name="ShowFGHigher" Content="FG Higher" Click="ShowFGHigher_Click" Style="{DynamicResource EditLayerToggleButton}"/>
                <ToggleButton x:Name="ShowEntities" Content="Entities" Click="ShowEntities_Click" Style="{DynamicResource EditLayerToggleButton}"/>

                <Separator Margin="0,2" Visibility="Collapsed"/>
                <Separator x:Name="extraViewLayersSeperator" Margin="0,2" Visibility="Visible"/>
                <maniac:EditLayerToggleButton DualSelect="True" IsLayerOptionsEnabled="True" x:Name="EditFGLower" Text="FG Lower" TextForeground="{DynamicResource Maniac_EditLayer_LabelText}" Click="EditFGLower_Click" RightClick="EditFGLower_RightClick"></maniac:EditLayerToggleButton>
                <maniac:EditLayerToggleButton DualSelect="True" IsLayerOptionsEnabled="True" x:Name="EditFGLow" Text="FG Low" TextForeground="{DynamicResource Maniac_EditLayer_LabelText}" Click="EditFGLow_Click" RightClick="EditFGLow_RightClick"></maniac:EditLayerToggleButton>
                <maniac:EditLayerToggleButton DualSelect="True" IsLayerOptionsEnabled="True" x:Name="EditFGHigh" Text="FG High" TextForeground="{DynamicResource Maniac_EditLayer_LabelText}" Click="EditFGHigh_Click" RightClick="EditFGHigh_RightClick"></maniac:EditLayerToggleButton>
                <maniac:EditLayerToggleButton DualSelect="True" IsLayerOptionsEnabled="True" x:Name="EditFGHigher" Text="FG Higher" TextForeground="{DynamicResource Maniac_EditLayer_LabelText}" Click="EditFGHigher_Click" RightClick="EditFGHigher_RightClick"></maniac:EditLayerToggleButton>
                <maniac:EditLayerToggleButton IsLayerControlsHidden="True" IsLayerOptionsEnabled="False" x:Name="EditEntities" Text="Entities" TextForeground="{DynamicResource Maniac_EditLayer_LabelText}" Click="EditEntities_Click"/>


                <ToolBar.Resources>
                    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="0,0,0,0"/>
                    </Style>
                </ToolBar.Resources>
            </ToolBar>
        </ToolBarTray>
    </Grid>
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/ManiacEditor;component/Controls/Editor/BaseStyles.xaml"></ResourceDictionary>
                <ResourceDictionary Source="/ManiacEditor;component/Controls/Assets/IconLibrary.xaml"></ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="ToolbarButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"></Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ToolbarToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"></Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
</UserControl>
