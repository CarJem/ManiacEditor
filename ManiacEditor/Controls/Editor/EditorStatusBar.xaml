<UserControl x:Class="ManiacEditor.Controls.Editor.StatusBar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             xmlns:local="clr-namespace:ManiacEditor.Controls.Editor"
             xmlns:maniac="clr-namespace:ManiacEditor.Settings.Bindings"
             mc:Ignorable="d local" 
             d:DesignHeight="70" d:DesignWidth="800" MaxHeight="70" MinHeight="70">
    <Grid Background="{DynamicResource StatusBarBackground}">
        <Grid.RowDefinitions>
            <RowDefinition Height="35"/>
            <RowDefinition Height="35"/>
        </Grid.RowDefinitions>
        <Grid x:Name="StatusBar1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="35" Grid.Row="0" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal" Margin="5" Focusable="False">
                <Label x:Name="positionLabel" Content="{Binding MousePositionString, Delay=500}" Foreground="{DynamicResource NormalText}"/>
                <Separator x:Name="seperator1" Visibility="Collapsed"  Style="{DynamicResource VerticalSeparatorStyle}"/>
                <Label x:Name="SelectedTilePositionLabel" ToolTip="{Binding SelectedTilePositionTooltipString, Delay=500}" Content="{Binding SelectedTilePositionString, Delay=500}" Foreground="{DynamicResource NormalText}"/>
                <Separator x:Name="seperator2" Visibility="Collapsed" Style="{DynamicResource VerticalSeparatorStyle}"/>
                <Label x:Name="SelectionSizeLabel" ToolTip="{Binding SelectionSizeTooltipString, Delay=500}" Content="{Binding SelectionSizeString, Delay=500}"  Foreground="{DynamicResource NormalText}"/>
                <Separator x:Name="seperator3" Visibility="Collapsed" Style="{DynamicResource VerticalSeparatorStyle}"/>
                <Label x:Name="SelectionBoxSizeLabel" Content="{Binding SelectionBoxSizeString, Delay=500}"  Foreground="{DynamicResource NormalText}"/>
                <Separator x:Name="seperator4" Visibility="Collapsed" Style="{DynamicResource VerticalSeparatorStyle}"/>
                <Label x:Name="ZoomValueLabel" Content="{Binding ZoomLevelString, Delay=500}" Foreground="{DynamicResource NormalText}"/>
                <Separator x:Name="seperator6"  Visibility="Collapsed" Style="{DynamicResource VerticalSeparatorStyle}"/>
            </StackPanel>

            <StatusBarItem Margin="0" Grid.Column="1" x:Name="StatusBarQuickButtons" Focusable="True" IsTabStop="True">
                <StackPanel Orientation="Horizontal">
                    <ToggleButton Style="{DynamicResource ToolbarToggleButton}" Foreground="{DynamicResource NormalText}" x:Name="EnablePixelModeButton" Margin="5,0,0,0" Content="Pixel Count Mode" Click="TogglePixelModeEvent" HorizontalAlignment="Center" Padding="3,5"/>
                    <ToggleButton Style="{DynamicResource ToolbarToggleButton}" Foreground="{DynamicResource NormalText}" x:Name="nudgeFasterButton" Margin="5,0,0,0" Content="Nudge Faster" Click="ToggleFasterNudgeEvent" Padding="3,5"/>
                    <ToggleButton Style="{DynamicResource ToolbarToggleButton}" Foreground="{DynamicResource NormalText}" x:Name="scrollLockButton" Margin="5,0,0,0" Content="Scroll Lock" Click="ToggleScrollLockEvent" Padding="3,5"/>
                </StackPanel>
            </StatusBarItem>

            <StackPanel Orientation="Horizontal" Grid.Column="2" Margin="5">
                <wpfTool:SplitButton x:Name="MoreSettingsButton" Click="QuickButtonClickEvent" Margin="-2">
                    <wpfTool:SplitButton.Content>
                        <ContentPresenter Content="{DynamicResource Gear}" ></ContentPresenter>
                    </wpfTool:SplitButton.Content>
                    <wpfTool:SplitButton.DropDownContent>
                        <StackPanel Background="{DynamicResource ContextMenuBackground}">
                            <MenuItem x:Name="QuickEditEntitiesTransparentLayers" Header="Edit Entites Transparency" Click="QuickButtonClickEvent"></MenuItem>
                            <MenuItem x:Name="QuickSwapEncoreManiaEntitVisibility" Header="Toggle Encore/Mania Entities" Click="QuickButtonClickEvent"></MenuItem>
                            <MenuItem x:Name="QuickSwapScrollDirection" Header="Swap Scroll Lock Direction" Click="QuickButtonClickEvent"></MenuItem>
                        </StackPanel>
                    </wpfTool:SplitButton.DropDownContent>
                </wpfTool:SplitButton>
                <Button Name="FilterButton" Margin="4,-2,0,-2" Width="30" Content="{DynamicResource Invert}" Padding="2" Click="FilterButtonOpenContextMenuEvent">
                    <Button.ContextMenu>
                        <ContextMenu Background="{DynamicResource ContextMenuBackground}" Style="{DynamicResource DefaultContextMenuStyle}">
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowManiaEntities}" Foreground="{DynamicResource Maniac_ManiaFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="maniaFilterCheck" Header="Mania (000000)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowBothEntities}" Foreground="{DynamicResource Maniac_BothFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="bothFilterCheck" Header="Common (000000)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowPinballEntities}" Foreground="{DynamicResource Maniac_OtherFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="pinballFilterCheck" Header="All (000000)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowEncoreEntities}" Foreground="{DynamicResource Maniac_PinballFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="encoreFilterCheck" Header="Encore (000000)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowOtherEntities}" Foreground="{DynamicResource Maniac_OtherFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="otherFilterCheck" Header="Other (000000)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                            <MenuItem IsChecked="{maniac:DefaultSettingsBinding ShowFilterlessEntities}" Foreground="{DynamicResource Maniac_NullFilter}" Checked="FilterCheckChangedEvent" Unchecked="FilterCheckChangedEvent" x:Name="prePlusFilterCheck" Header="Filterless (Pre-Plus)" StaysOpenOnClick="True" IsCheckable="True"></MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
            </StackPanel>
            <StatusBarItem HorizontalAlignment="Right" DockPanel.Dock="Right">
            </StatusBarItem>
            <MenuItem x:Name="EntityContext" Visibility="Collapsed">
                <MenuItem x:Name="EntityNameItem" IsHitTestVisible="False"></MenuItem>
                <MenuItem x:Name="EntitySlotIDItem" IsHitTestVisible="False"></MenuItem>
                <MenuItem x:Name="EntityPositionItem" IsHitTestVisible="False"></MenuItem>
                <Separator/>
            </MenuItem>
            <MenuItem x:Name="TilesContext" Visibility="Collapsed">
                <MenuItem x:Name="PixelPositionMenuItem" IsHitTestVisible="False"></MenuItem>
                <MenuItem x:Name="ChunkPositionMenuItem" IsHitTestVisible="False"></MenuItem>
                <MenuItem x:Name="TilePositionMenuItem" IsHitTestVisible="False"></MenuItem>
                <Separator/>
                <MenuItem x:Name="TileManiacIntergrationItem" Header="Edit Tile {0} with Tile Maniac" Click="TileManiacEditTileEvent"></MenuItem>
            </MenuItem>
        </Grid>
        <Grid x:Name="StatusBar2"  HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Grid.Row="1" Height="35">
            <Grid.ColumnDefinitions>
                <ColumnDefinition></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <StatusBarItem Margin="0">
                <StackPanel Orientation="Horizontal">
                    <Label x:Name="LevelIdentifierLabel" Foreground="{DynamicResource NormalText}"/>
                    <Separator x:Name="seperator7" Visibility="Collapsed"/>
                    <Label x:Name="DataDirectoryLabel" Tag=" " Foreground="{DynamicResource NormalText}"/>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem Margin="0" Grid.Column="2">
                <StackPanel Orientation="Horizontal">
                    <Separator x:Name="seperator5" Visibility="Collapsed"/>
                    <Label x:Name="ScrollLockDirectionLabel" Content="{Binding ScrollDirectionString}" Foreground="{DynamicResource NormalText}"/>
                </StackPanel>
            </StatusBarItem>
        </Grid>
    </Grid>
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/ManiacEditor;component/Controls/Editor/BaseStyles.xaml"></ResourceDictionary>
                <ResourceDictionary>
                    <Style TargetType="ContextMenu">
                        <Style.Setters>
                            <Setter Property="Background" Value="{DynamicResource NormalContextMenuBackground}"></Setter>
                            <Setter Property="Style" Value="{DynamicResource DefaultContextMenuStyle}"></Setter>
                        </Style.Setters>
                    </Style>
                    <Style x:Key="ToolbarButton" TargetType="{x:Type Button}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                        <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsDefaulted" Value="true">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsKeyboardFocused" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"></Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ToolbarToggleButton" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="BorderBrush" Value="Transparent"></Setter>
                        <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsKeyboardFocused" Value="true">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"></Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
</UserControl>
