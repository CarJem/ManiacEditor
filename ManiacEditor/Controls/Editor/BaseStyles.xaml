<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xceed="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:ManiacEditor.Controls.Editor">
    <ContextMenu x:Key="StandardContextMenu">
        <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
        <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
        <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
    </ContextMenu>

    <Style x:Key="EditLayerToggleButton" x:Name="EditLayerFlatToggleButtons" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="28"></RowDefinition>
                            <RowDefinition Height="1"></RowDefinition>
                            <RowDefinition Height="13"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <Grid Grid.Column="0" Margin="2,0,2,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{DynamicResource DisabledText}" Grid.Row="2" Grid.ColumnSpan="2"></Grid>
                        <Grid x:Name="FillGrid" Grid.Row="3" Margin="2,0,2,0" IsEnabled="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="arrowGlyph" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Margin="4,0">
                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource DisabledText}" Height="5" Margin="0,1,0,0" Width="9"/>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.7"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolbarButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7"></Setter>
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolbarToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"></Setter>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7"></Setter>
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolbarButtonChrome" TargetType="{x:Type xceed:ButtonChrome}">
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xceed:ButtonChrome}">
                    <Grid>
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" IsEnabled="{TemplateBinding IsEnabled}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Opacity" Value="0.7"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Border}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Background}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Border}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Button.MouseOver.Background}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="True"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Border}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Background}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True"/>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Border}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Button.Pressed.Background}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Opacity" Value="0.7"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StatusBarSplitButton" TargetType="{x:Type xceed:SplitButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
        <Setter Property="DropDownContentBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF0F0F0" Offset="0"/>
                    <GradientStop Color="#FFE5E5E5" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xceed:SplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <xceed:ButtonChrome x:Name="ControlChrome" Background="{TemplateBinding Background}" RenderEnabled="{TemplateBinding IsEnabled}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_ActionButton" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" Padding="{TemplateBinding Padding}" Style="{x:Null}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </ControlTemplate>
                                    </Button.Template>
                                    <Grid>
                                        <xceed:ButtonChrome Style="{DynamicResource ToolbarButtonChrome}" x:Name="ActionButtonChrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ActionButton}" RenderPressed="{Binding IsPressed, ElementName=PART_ActionButton}" RenderEnabled="{TemplateBinding IsEnabled}">
                                            <xceed:ButtonChrome.BorderThickness>
                                                <Binding ConverterParameter="2" Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <xceed:ThicknessSideRemovalConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </xceed:ButtonChrome.BorderThickness>
                                            <ContentPresenter x:Name="ActionButtonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </xceed:ButtonChrome>
                                    </Grid>
                                </Button>
                                <ToggleButton x:Name="PART_ToggleButton" Grid.Column="1" IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xceed:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <Grid>
                                        <xceed:ButtonChrome  Style="{DynamicResource ToolbarButtonChrome}" x:Name="ToggleButtonChrome" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1,0" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ToggleButton}" RenderPressed="{Binding IsPressed, ElementName=PART_ToggleButton}" RenderChecked="{TemplateBinding IsOpen}" RenderEnabled="{TemplateBinding IsEnabled}">
                                            <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3">
                                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource NormalText}" Height="5" Margin="0,1,0,0" Width="9"/>
                                            </Grid>
                                        </xceed:ButtonChrome>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </xceed:ButtonChrome>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="True" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_ToggleButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="True" VerticalOffset="1">
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                            <Setter Property="Foreground" TargetName="ActionButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolbarSplitButton" TargetType="{x:Type xceed:SplitButton}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="DropDownContentBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF0F0F0" Offset="0"/>
                    <GradientStop Color="#FFE5E5E5" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xceed:SplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <xceed:ButtonChrome x:Name="ControlChrome" Background="{TemplateBinding Background}" RenderEnabled="{TemplateBinding IsEnabled}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_ActionButton" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" Padding="{TemplateBinding Padding}" Style="{x:Null}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </ControlTemplate>
                                    </Button.Template>
                                    <Grid>
                                        <xceed:ButtonChrome x:Name="ActionButtonChrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ActionButton}" RenderPressed="{Binding IsPressed, ElementName=PART_ActionButton}" RenderEnabled="{TemplateBinding IsEnabled}">
                                            <xceed:ButtonChrome.BorderThickness>
                                                <Binding ConverterParameter="2" Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <xceed:ThicknessSideRemovalConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </xceed:ButtonChrome.BorderThickness>
                                            <ContentPresenter x:Name="ActionButtonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </xceed:ButtonChrome>
                                    </Grid>
                                </Button>
                                <ToggleButton x:Name="PART_ToggleButton" Grid.Column="1" IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xceed:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <Grid>
                                        <xceed:ButtonChrome x:Name="ToggleButtonChrome" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1,0" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ToggleButton}" RenderPressed="{Binding IsPressed, ElementName=PART_ToggleButton}" RenderChecked="{TemplateBinding IsOpen}" RenderEnabled="{TemplateBinding IsEnabled}">
                                            <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3">
                                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource NormalText}" Height="5" Margin="0,1,0,0" Width="9"/>
                                            </Grid>
                                        </xceed:ButtonChrome>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </xceed:ButtonChrome>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="True" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_ToggleButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="True" VerticalOffset="1">
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                            <Setter Property="Foreground" TargetName="ActionButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StatusBarToggleButton" x:Name="StatusBarToggleButtons" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,0,5,0" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolbarDropDownButton" TargetType="{x:Type xceed:DropDownButton}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText}"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="DropDownContentBackground" Value="{DynamicResource ContextMenuBackground}"></Setter>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xceed:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xceed:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <xceed:ButtonChrome Style="{DynamicResource ToolbarButtonChrome}" x:Name="ToggleButtonChrome" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2.75" Foreground="{TemplateBinding Foreground}" InnerCornerRadius="1.75" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}" RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}" RenderChecked="{TemplateBinding IsOpen}" RenderEnabled="{TemplateBinding IsEnabled}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="4,3">
                                            <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource NormalText}" Height="5" Margin="0,1,0,0" Width="9"/>
                                        </Grid>
                                    </Grid>
                                </xceed:ButtonChrome>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="True" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="True" ToolTip="" VerticalOffset="1">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border.BorderBrush>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFA3AEB9" Offset="0"/>
                                        <GradientStop Color="#FF8399A9" Offset="0.375"/>
                                        <GradientStop Color="#FF718597" Offset="0.375"/>
                                        <GradientStop Color="#FF617584" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Transparent"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSeparatorStyle" 
       TargetType="{x:Type Separator}"
       BasedOn="{StaticResource {x:Type Separator}}">
        <Setter Property="Margin" Value="6,0,6,0"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <TransformGroup.Children>
                        <TransformCollection>
                            <RotateTransform Angle="90"/>
                        </TransformCollection>
                    </TransformGroup.Children>
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>