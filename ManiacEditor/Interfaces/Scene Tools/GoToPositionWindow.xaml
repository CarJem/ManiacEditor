<Window x:Class="ManiacEditor.Interfaces.GoToPositionBox"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:wpfTool="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:ManiacEditor"
        mc:Ignorable="d"
        Title="Go to..." MinHeight="400" WindowStartupLocation="CenterOwner" MinWidth="400" MaxHeight="400" MaxWidth="400" ResizeMode="NoResize" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalText}" Width="400" Height="400">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <GroupBox Header="Coordinates" x:Name="PositionPanel" Grid.ColumnSpan="2" Margin="5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <StackPanel>
                    <Label Content="X:" Width="46" HorizontalAlignment="Left"></Label>
                    <wpfTool:IntegerUpDown Value="0" x:Name="X" Height="22" HorizontalAlignment="Stretch"></wpfTool:IntegerUpDown>
                    <Label Content="Y:" HorizontalAlignment="Left"></Label>
                    <wpfTool:IntegerUpDown Value="0" x:Name="Y" Height="22" HorizontalAlignment="Stretch"></wpfTool:IntegerUpDown>
                    <CheckBox x:Name="TileModeCheckbox" Content="Tile Mode" Margin="0,20,0,0" HorizontalAlignment="Left"></CheckBox>
                    <CheckBox IsEnabled="True" VerticalAlignment="Center" Margin="0,2,0,0" Grid.Column="0" x:Name="SavePositionCheckbox" Content="Save Position As:" HorizontalAlignment="Left" Checked="SavePositionCheckbox_Checked" Unchecked="SavePositionCheckbox_Checked"></CheckBox>
                </StackPanel>
                <Grid Grid.Column="2">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="26"></RowDefinition>
                        <RowDefinition></RowDefinition>
                        <RowDefinition Height="26"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Label Content="Saved Positions:" Height="26" Margin="5,0" HorizontalAlignment="Left"></Label>
                    <ListBox Style="{DynamicResource BaseListBoxStyle}" x:Name="SavedPositionsList" Margin="5,0,5,5" Grid.Row="1" SelectionChanged="SavedPositionsList_SelectionChanged"></ListBox>
                </Grid>
                <StackPanel Grid.ColumnSpan="2" VerticalAlignment="Bottom">
                    <Grid Height="26">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="125"></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBox IsEnabled="False" x:Name="SavedPositionTextBox" Text="" TextChanged="SavedPositionTextBox_TextChanged" VerticalContentAlignment="Center" Grid.Column="1" Grid.ColumnSpan="2" Margin="3,0"></TextBox>
                        <Button Margin="3,0" Grid.Column="3" Content="GO" Name="gotocoordsbutton" Click="GoToCoords_Click"></Button>
                    </Grid>

                </StackPanel>
            </Grid>
            
        </GroupBox>
        <GroupBox Margin="5" Header="Player Spawn" Grid.Row="1" Grid.ColumnSpan="1" x:Name="PlayerPanel">
            <Grid>
                <StackPanel VerticalAlignment="Center">
                    <Label Content="Warp to:" Margin="5,0" HorizontalAlignment="Left" VerticalAlignment="Center"></Label>
                    <ComboBox Foreground="{DynamicResource NormalText}" Template="{DynamicResource ComboBoxControlTemplate1}" x:Name="ComboBox1" Grid.Row="1" Grid.Column="0" Margin="5,0,5,0" SelectionChanged="ComboBox1_SelectionChanged"></ComboBox>
                    <Button Content="GO!" Name="PlayerWarpButton" Grid.Row="1" Grid.Column="1" Margin="5,5,5,5" Click="GoToPlayer_Click" IsEnabled="False"></Button>
                </StackPanel>
            </Grid>
        </GroupBox>





    </Grid>
    <Window.Resources>
        <ResourceDictionary>
            <Style TargetType="{x:Type Image}">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.4" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="{DynamicResource NormalText}" />
            </Style>
            <Style x:Key="DisabledToggleButton" TargetType="{x:Type ToggleButton}">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource DisabledText}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="true">
                        <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="Flat" x:Name="FlatToggleButtons" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,0,5,0" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="Control.IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type wpfTool:IntegerUpDown}">
                <Setter Property="Background" Value="{DynamicResource TextBoxBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource NormalText}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}"/>
            </Style>

            <Style x:Key="Flat2" x:Name="FlatButtons" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,0,5,0" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                                    <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="Control.IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ContextMenuSelectedColor}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ContextMenuSelectedColorBack}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RemoveMouseOverEffect" TargetType="Button">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="border" 
                            BorderThickness="1"
                            Padding="0,0" 
                            BorderBrush="Transparent" 
                            CornerRadius="0" 
                            Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
</Window>
